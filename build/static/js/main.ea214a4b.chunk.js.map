{"version":3,"sources":["components/Cards/Cards.module.css","components/Cards/Cards.js","components/Charts/Charts.js","store/actions/actions.js","store/actionConstants.js","components/CountryPicker/CountryPicker.js","utils/httpResponseInterceptor.js","store/store.js","store/reducers/fetchData.js","store/reducers/fetchDailyData.js","store/reducers/fetchCountries.js","utils/http.js","utils/httpRequestInterceptor.js","App.js","serviceWorker.js","index.js","App.module.css","components/Charts/Charts.module.css","components/CountryPicker/CountryPicker.module.css","images/image.png"],"names":["module","exports","Cards","data","this","props","confirmed","recovered","deaths","lastUpdate","className","styles","container","Grid","spacing","justify","item","component","Card","xs","md","cx","card","infected","CardContent","Typography","color","gutterBottom","variant","start","end","value","duration","separator","Date","toDateString","loading","React","Component","Charts","fetchDailyData","dailyData","lineChart","labels","map","date","datasets","label","borderColor","fill","backgroundColor","country","barChart","options","legend","display","title","text","mapDispatchToProps","dispatch","axios","get","then","response","type","payload","catch","error","console","log","connect","state","fetchedDailyData","CountryPicker","countriesList","displayList","optionList","index","key","FormControl","formControl","NativeSelect","defaultValue","onChange","e","handleCountryChange","target","checkResponse","a","status","Promise","reject","httpStatus","json","rootReducer","combineReducers","fetchedData","action","total","reportDate","fetchedCountries","countries","name","store","createStore","applyMiddleware","thunk","httpFetch","url","requestObj","params","headers","include_sso_token","skip_content_type","getPostHeaders","body","JSON","stringify","checkRequest","fetch","message","resp","resolve","err","App","fetchData","setState","FETCH_COUNTRIES_API","fetchCountries","prevProps","src","titleImage","image","alt","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.ea214a4b.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Cards_container__3bjn6\",\"loading\":\"Cards_loading__3BC6P\",\"card\":\"Cards_card__eGUfZ\",\"infected\":\"Cards_infected__-adYp\",\"recovered\":\"Cards_recovered__1aizD\",\"deaths\":\"Cards_deaths__Qdjzq\"};","import React from 'react';\nimport cx from 'classnames';\nimport Countup from 'react-countup';\nimport {\n    Card,\n    CardContent,\n    Typography,\n    Grid\n} from '@material-ui/core';\nimport styles from './Cards.module.css';\n\nclass Cards extends React.Component {\n    render() {\n        const data = this.props.data;\n        const { confirmed, recovered, deaths, lastUpdate } = data;\n        if (!confirmed) {\n            return <div className={styles.loading}>\n                Loading...\n            </div>\n        } else {\n            return (\n                <div className={styles.container}>\n                    <Grid container spacing={3} justify='center'>\n                        <Grid item component={Card} xs={12} md={3} className={cx(styles.card, styles.infected)}>\n                            <CardContent>\n                                <Typography color='textSecondary' gutterBottom>\n                                    Infected\n                            </Typography>\n                                <Typography variant='h5'>\n                                    <Countup\n                                        start={0}\n                                        end={confirmed.value}\n                                        duration={1}\n                                        separator=\",\"\n                                    />\n                                </Typography>\n                                <Typography color='textSecondary' gutterBottom>\n                                    {new Date(lastUpdate).toDateString()}\n                                </Typography>\n                                <Typography variant='body2'>\n                                    Number of Active Cases of COVID-19\n                            </Typography>\n                            </CardContent>\n                        </Grid>\n                        <Grid item component={Card} xs={12} md={3} className={cx(styles.card, styles.recovered)}>\n                            <CardContent>\n                                <Typography color='textSecondary' gutterBottom>\n                                    Recovered\n                                </Typography>\n                                <Typography variant='h5'>\n                                    <Countup\n                                        start={0}\n                                        end={recovered.value}\n                                        duration={1}\n                                        separator=\",\"\n                                    />\n                                </Typography>\n                                <Typography color='textSecondary' gutterBottom>\n                                    {new Date(lastUpdate).toDateString()}\n                                </Typography>\n                                <Typography variant='body2'>\n                                    Number of Recovered Cases of COVID-19\n                            </Typography>\n                            </CardContent>\n                        </Grid>\n                        <Grid item component={Card} xs={12} md={3} className={cx(styles.card, styles.deaths)}>\n                            <CardContent>\n                                <Typography color='textSecondary' gutterBottom>\n                                    Deaths\n                            </Typography>\n                                <Typography variant='h5'>\n                                    <Countup\n                                        start={0}\n                                        end={deaths.value}\n                                        duration={1}\n                                        separator=\",\"\n                                    />\n                                </Typography>\n                                <Typography color='textSecondary' gutterBottom>\n                                    {new Date(lastUpdate).toDateString()}\n                                </Typography>\n                                <Typography variant='body2'>\n                                    Number of Deaths caused by Covid-19\n                            </Typography>\n                            </CardContent>\n                        </Grid>\n                    </Grid>\n                </div>\n            )\n        }\n    }\n}\n\nexport default Cards;","import React from 'react';\nimport { connect } from 'react-redux';\nimport { Line, Bar } from 'react-chartjs-2';\nimport { fetchDailyData } from '../../store/actions/actions';\n\n// CSS\nimport styles from './Charts.module.css';\n\nclass Charts extends React.Component {\n    componentDidMount() {\n        this.props.fetchDailyData();\n    }\n\n    render() {\n        const dailyData = this.props.dailyData;\n\n        const lineChart = (dailyData && dailyData[0]) ?\n            (\n                <Line\n                    data={{\n                        labels: dailyData.map(({ date }) => date),\n                        datasets: [{\n                            data: dailyData.map(({ confirmed }) => confirmed),\n                            label: 'Infected',\n                            borderColor: 'blue',\n                            fill: true\n                        },\n                        {\n                            data: dailyData.map(({ deaths }) => deaths),\n                            label: 'Deaths',\n                            borderColor: 'red',\n                            backgroundColor: 'rgba(255,0,0,0.5)',\n                            fill: true\n                        }]\n                    }}\n                />\n            ) :\n            null;\n\n        const country = this.props.country;\n        const data = this.props.data;\n        const barChart = (data && data.confirmed) ?\n            (\n                <Bar\n                    data={{\n                        labels: ['Infected', 'Recovered', 'Deaths'],\n                        datasets: [{\n                            label: 'People',\n                            backgroundColor: [\n                                'rgba(0, 0, 255, 0.5)',\n                                'rgba(0, 255, 0, 0.5)',\n                                'rgba(255, 0, 0, 0.5)'\n                            ],\n                            data: [data.confirmed.value, data.recovered.value, data.deaths.value]\n                        }]\n                    }}\n                    options={{\n                        legend: { display: false },\n                        title: {\n                            display: true,\n                            text: `Current state is ${country}`\n                        }\n                    }}\n                />\n            )\n            :\n            null;\n\n        return (\n            <div className={styles.container}>\n                {country ? barChart : lineChart}\n            </div>\n        )\n    }\n}\n\nconst mapStateToProps = (state) => ({\n    dailyData: state.fetchedDailyData\n});\n\nconst mapDispatchToProps = {\n    fetchDailyData\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Charts);","import axios from 'axios';\nimport { DATA_API, DAILY_DATA_API, FETCH_DATA, FETCH_DAILY_DATA, FETCH_COUNTRIES_API, FETCH_COUNTRIES } from '../actionConstants';\n\nexport function dispatchFetchData (data) {\n    return {\n        type: FETCH_DATA,\n        payload: data\n    };\n}\n\nexport function fetchData() {\n    return (dispatch) => {\n        const url = DATA_API;\n        axios.get(url)\n            .then((response) => {\n                dispatch(dispatchFetchData(response.data));\n            })\n            .catch((error) => {\n                console.log('Error occurred: ', error);\n            })\n    }\n}\n\nexport function dispatchDailyData(data) {\n    return {\n        type: FETCH_DAILY_DATA,\n        payload: data\n    }\n}\n\nexport function fetchDailyData() {\n    return (dispatch) => {\n        const url = DAILY_DATA_API;\n        axios.get(url)\n            .then((response) => {\n                dispatch(dispatchDailyData(response.data));\n            })\n            .catch((error) => {\n                console.log('Error occurred: ', error);\n            })\n    }\n}\n\nexport function dispatchCountries(data) {\n    return {\n        type: FETCH_COUNTRIES,\n        payload: data\n    }\n}\n\nexport function fetchCountries() {\n    return (dispatch) => {\n        const url = FETCH_COUNTRIES_API;\n        axios.get(url)\n            .then((response) => {\n                dispatch(dispatchCountries(response.data));\n            })\n            .catch((error) => {\n                console.log('Error occurred: ', error);\n            })\n    }\n}","\nexport const DATA_API = 'https://covid19.mathdro.id/api';\nexport const DAILY_DATA_API = 'https://covid19.mathdro.id/api/daily';\nexport const FETCH_COUNTRIES_API = 'https://covid19.mathdro.id/api/countries';\nexport const FETCH_DATA = 'FETCH_DATA';\nexport const FETCH_DAILY_DATA = 'FETCH_DAILY_DATA';\nexport const FETCH_COUNTRIES = 'FETCH_COUNTRIES';","import React from 'react';\nimport { NativeSelect, FormControl } from '@material-ui/core'\n\n// CSS\nimport styles from './CountryPicker.module.css';\n\nclass CountryPicker extends React.Component {\n    render() {\n        const countriesList = this.props.data;\n        const displayList = countriesList && countriesList[0];\n        let optionList = displayList ?\n            countriesList.map((country, index) =>\n                <option key={index} value={country}>{country}</option>\n            ) :\n            [];\n        return displayList ?\n            (\n                <FormControl className={styles.formControl}>\n                    <NativeSelect defaultValue=''\n                        onChange={(e) => this.props.handleCountryChange(e.target.value)}>\n                        <option value='global'>Global</option>\n                        {optionList}\n                    </NativeSelect>\n                </FormControl>\n            ) :\n            null;\n    }\n}\n\nexport default CountryPicker;","export async function checkResponse (response) {\n    let status = response.status;\n    if(status >= 200 && status <= 305) {\n        return response;\n    } else if (status === 401) {\n        // LOGOUT user\n        \n        return Promise.reject({\n            httpStatus: status,\n            error: \"Session time out. Please login again to continue.\"\n        });\n    } else {\n\n        let error;\n        try {\n            error = await response.json();\n        } catch {\n            error = \"Something went wrong. Please try again later.\";\n        }\n        Promise.reject({\n            httpStatus: status,\n            error\n        })\n    }\n}","import thunk from 'redux-thunk';\nimport { createStore, applyMiddleware, combineReducers } from 'redux';\n\n// Reducers\nimport fetchedData from './reducers/fetchData';\nimport fetchedDailyData from './reducers/fetchDailyData';\nimport fetchedCountries from './reducers/fetchCountries';\n\n// Creating Root Reducer\nconst rootReducer = combineReducers({\n    fetchedData,\n    fetchedDailyData,\n    fetchedCountries\n});\n\n// Create Store\nconst store = createStore(rootReducer, applyMiddleware(thunk));\n\nexport default store;","import { FETCH_DATA } from \"../actionConstants\";\n\nexport default function fetchData (state={}, action) {\n    switch(action.type) {\n        case FETCH_DATA:\n            const { confirmed, recovered, deaths, lastUpdate } = action.payload;\n            const data = { confirmed, recovered, deaths, lastUpdate };\n            return {\n                ...state,\n                ...data\n            }\n        default:\n            return state;\n    }\n}","import { FETCH_DAILY_DATA } from \"../actionConstants\";\n\nexport default function fetchDailyData (state=[], action) {\n    switch(action.type) {\n        case FETCH_DAILY_DATA:\n            const data = action.payload.map((item) => ({\n                confirmed: item.confirmed.total,\n                deaths: item.deaths.total,\n                date: item.reportDate\n            }))\n            return [\n                ...state,\n                ...data\n            ]\n        default:\n            return state;\n    }\n}","import { FETCH_COUNTRIES } from \"../actionConstants\";\n\nexport default function fetchCountries(state=[], action) {\n    switch(action.type) {\n        case FETCH_COUNTRIES:\n            let data = action.payload.countries;\n            data = data.map(({name}) => name);\n            return [\n                ...state,\n                ...data\n            ]\n        default:\n            return state;\n    }\n}","import fetch from 'node-fetch';\nimport { checkResponse } from './httpResponseInterceptor';\nimport { checkRequest } from './httpRequestInterceptor';\n\nexport function httpFetch(url, options) {\n    let requestObj = checkRequest(url, options);\n\n    let response = fetch(requestObj.url, requestObj.params)\n    .then(checkResponse, () => {\n        return Promise.reject({\n            error: {\n                message: \"Something went wrong. Please try again later.\"\n            }\n        });\n    })\n    .then(resp => {\n        return new Promise(resolve => {\n            resp.json().then(data => {\n                resolve(data);\n            }, () => {\n                resolve({});\n            });\n        });\n    },err => Promise.reject(err));\n\n    return response;\n}\n","import store from \"../store/store\";\n\nfunction getPostHeaders(headers, include_sso_token, skip_content_type) {\n    if (!headers) {\n        return {};\n    }\n    if (!skip_content_type) {\n        headers['Content-Type'] = 'application/json';\n    }\n\n    // Setting false currently since this is for specific use case\n    // Not Available in this application\n    let condition = false;\n    if (include_sso_token && condition) {\n        let user = store.getState().user;\n        headers['sso-token'] = user ? user.token : null;\n    }\n\n    return headers;\n}\n\nexport const checkRequest = (url, options) => {\n\n    let params = { ...options };\n    let headers = getPostHeaders(params && params.headers);\n\n    if (params.body && typeof params.body === 'object') {\n        params.body = JSON.stringify(params.body);\n    }\n\n    params = { ...headers, ...params };\n\n    let requestObj = {\n        url,\n        params\n    }\n    return requestObj;\n}","import React from 'react';\n\nimport { connect } from 'react-redux';\n\n// Components\nimport Cards from './components/Cards/Cards';\nimport Charts from './components/Charts/Charts';\nimport CountryPicker from './components/CountryPicker/CountryPicker';\n\n// actions\nimport { fetchData, fetchCountries } from './store/actions/actions';\n\n// Image\nimport titleImage from './images/image.png';\n\n// CSS\nimport styles from './App.module.css';\nimport { FETCH_COUNTRIES_API } from './store/actionConstants';\nimport { httpFetch } from './utils/http';\n\nclass App extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      fetchedData: {},\n      country: ''\n    };\n  }\n\n  componentDidMount() {\n    this.props.fetchData();\n    this.props.fetchCountries();\n  }\n\n  componentDidUpdate(prevProps) {\n    if (prevProps.fetchedData !== this.props.fetchedData) {\n      this.setState({\n        fetchedData: this.props.fetchedData\n      })\n    } else if (prevProps.fetchedCountries !== this.props.fetchedCountries) {\n      this.setState({\n        fetchedData: this.props.fetchedCountries\n      })\n    }\n  }\n\n  handleCountryChange = (country) => {\n    if (country === 'global') {\n      this.props.fetchData();\n      this.setState({\n        country: ''\n      })\n    }\n    else {\n      let url = FETCH_COUNTRIES_API + '/' + country;\n\n      httpFetch(url)\n        .then((response) => {\n          this.setState({\n            fetchedData: response,\n            country\n          });\n        }, (error) => {\n          console.log(error);\n        });\n    }\n  }\n\n  render() {\n    return (\n      <div className={styles.container}>\n        <img src={titleImage} className={styles.image} alt='COVID-19'/>\n        <Cards data={this.state.fetchedData} />\n        <CountryPicker handleCountryChange={this.handleCountryChange} data={this.props.countriesList} />\n        <Charts data={this.state.fetchedData} country={this.state.country}/>\n      </div>\n    )\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  fetchedData: state.fetchedData,\n  countriesList: state.fetchedCountries\n});\n\nconst mapDispatchToProps = {\n  fetchData,\n  fetchCountries\n}\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(App);","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n// Provider from Redux\nimport { Provider } from 'react-redux';\n// Store\nimport store from './store/store';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"body\":\"App_body__ZTvxg\",\"container\":\"App_container__1MQN3\",\"image\":\"App_image__3byI1\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Charts_container__1mZfu\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"CountryPicker_formControl__2p8f9\"};","module.exports = __webpack_public_path__ + \"static/media/image.d7265326.png\";"],"sourceRoot":""}